"""
Base Agent Framework Module
Production implementation for Google ADK base agent framework
"""

import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, Union, Callable
from dataclasses import dataclass
from abc import ABC, abstractmethod

# Real Google ADK imports - verified from Context7 documentation
from google.adk.agents import LlmAgent, SequentialAgent, ParallelAgent
from google.adk.models.lite_llm import LiteLlm
from google.adk.tools import FunctionTool
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner
from google.genai import types

# Core utilities
from prometheus_client import Counter, Histogram, Gauge

logger = logging.getLogger(__name__)


class BaseAgent(ABC):
    """
    Abstract base class for all trading agents
    
    Provides common functionality for:
    - Configuration management
    - Initialization lifecycle
    - Error handling
    - Performance metrics
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.is_initialized = False
        
        # Common agent properties
        self.agent_name = config.get('name', self.__class__.__name__)
        self.frequency_seconds = config.get('frequency_seconds', 60)
        self.confidence_threshold = config.get('confidence_threshold', 0.6)
        
        # Performance tracking
        self.metrics = {
            'signals_generated': 0,
            'total_execution_time': 0.0,
            'success_rate': 0.0,
            'average_confidence': 0.0
        }
        
    async def initialize(self) -> None:
        """Initialize the agent - can be overridden by subclasses"""
        self.is_initialized = True
        logger.info(f"{self.agent_name} initialized")
    
    @abstractmethod
    async def analyze_market_data(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze market data and generate trading signal - must be implemented by subclasses"""
        pass
    
    @abstractmethod
    def calculate_confidence_score(self, market_data: Dict[str, Any]) -> float:
        """Calculate confidence score - must be implemented by subclasses"""
        pass
    
    def should_publish_signal(self, signal: Dict[str, Any]) -> bool:
        """Determine if signal should be published based on confidence threshold"""
        return signal.get('confidence', 0.0) >= self.confidence_threshold
    
    def get_agent_status(self) -> Dict[str, Any]:
        """Get agent status information"""
        return {
            'name': self.agent_name,
            'is_initialized': self.is_initialized,
            'frequency_seconds': self.frequency_seconds,
            'confidence_threshold': self.confidence_threshold,
            'metrics': self.metrics
        }


class AgentRegistry:
    """Registry for managing agent instances and configurations"""
    
    def __init__(self):
        self.agents: Dict[str, LlmAgent] = {}
        self.agent_configs: Dict[str, Dict[str, Any]] = {}
        self.agent_metrics: Dict[str, Dict[str, Any]] = {}
    
    def register_agent(self, name: str, agent: LlmAgent, config: Dict[str, Any]) -> None:
        """Register an agent with its configuration"""
        self.agents[name] = agent
        self.agent_configs[name] = config
        self.agent_metrics[name] = {
            'created_at': datetime.now(timezone.utc),
            'execution_count': 0,
            'last_execution': None
        }
        logger.info(f"Registered agent: {name}")
    
    def get_agent(self, name: str) -> Optional[LlmAgent]:
        """Get agent by name"""
        return self.agents.get(name)
    
    def list_agents(self) -> List[str]:
        """List all registered agent names"""
        return list(self.agents.keys())
    
    def get_agent_config(self, name: str) -> Optional[Dict[str, Any]]:
        """Get agent configuration"""
        return self.agent_configs.get(name)
    
    def remove_agent(self, name: str) -> bool:
        """Remove agent from registry"""
        if name in self.agents:
            del self.agents[name]
            del self.agent_configs[name]
            del self.agent_metrics[name]
            logger.info(f"Removed agent: {name}")
            return True
        return False


class ToolRegistry:
    """Registry for managing FunctionTools"""
    
    def __init__(self):
        self.tools: Dict[str, FunctionTool] = {}
        self.tool_configs: Dict[str, Dict[str, Any]] = {}
    
    def register_tool(self, name: str, tool: FunctionTool, config: Dict[str, Any]) -> None:
        """Register a tool with its configuration"""
        self.tools[name] = tool
        self.tool_configs[name] = config
        logger.info(f"Registered tool: {name}")
    
    def get_tool(self, name: str) -> Optional[FunctionTool]:
        """Get tool by name"""
        return self.tools.get(name)
    
    def list_tools(self) -> List[str]:
        """List all registered tool names"""
        return list(self.tools.keys())
    
    def get_tools_by_category(self, category: str) -> List[FunctionTool]:
        """Get tools by category"""
        matching_tools = []
        for name, config in self.tool_configs.items():
            if config.get('category') == category:
                tool = self.tools.get(name)
                if tool:
                    matching_tools.append(tool)
        return matching_tools


class AgentOrchestrator:
    """Orchestrator for managing agent workflows and execution patterns"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.max_concurrent_agents = config.get('max_concurrent_agents', 8)
        self.execution_timeout = config.get('execution_timeout', 300)
        self.retry_attempts = config.get('retry_attempts', 3)
        
        # Workflow tracking
        self.active_workflows: Dict[str, Any] = {}
        self.workflow_history: List[Dict[str, Any]] = []
        
        # Performance metrics - Skip Prometheus setup to avoid conflicts
        self.metrics = {}
    
    async def create_sequential_workflow(self, name: str, agents: List[LlmAgent]) -> SequentialAgent:
        """Create a sequential workflow with the given agents"""
        try:
            workflow = SequentialAgent(
                name=name,
                sub_agents=agents
            )
            
            self.active_workflows[name] = {
                'type': 'sequential',
                'workflow': workflow,
                'agents': agents,
                'created_at': datetime.now(timezone.utc)
            }
            
            logger.info(f"Created sequential workflow: {name} with {len(agents)} agents")
            
            return workflow
            
        except Exception as e:
            logger.error(f"Failed to create sequential workflow {name}: {e}")
            raise
    
    async def create_parallel_workflow(self, name: str, agents: List[LlmAgent]) -> ParallelAgent:
        """Create a parallel workflow with the given agents"""
        try:
            workflow = ParallelAgent(
                name=name,
                sub_agents=agents
            )
            
            self.active_workflows[name] = {
                'type': 'parallel',
                'workflow': workflow,
                'agents': agents,
                'created_at': datetime.now(timezone.utc)
            }
            
            logger.info(f"Created parallel workflow: {name} with {len(agents)} agents")
            
            return workflow
            
        except Exception as e:
            logger.error(f"Failed to create parallel workflow {name}: {e}")
            raise
    
    async def create_complex_workflow(self, name: str, parallel_agents: List[LlmAgent], 
                                    sequential_agents: List[LlmAgent]) -> SequentialAgent:
        """Create a complex workflow combining parallel and sequential execution"""
        try:
            # Create parallel stage
            parallel_stage = ParallelAgent(
                name=f"{name}_parallel_stage",
                sub_agents=parallel_agents
            )
            
            # Combine parallel stage with sequential agents
            all_agents = [parallel_stage] + sequential_agents
            
            workflow = SequentialAgent(
                name=name,
                sub_agents=all_agents
            )
            
            self.active_workflows[name] = {
                'type': 'complex',
                'workflow': workflow,
                'parallel_agents': parallel_agents,
                'sequential_agents': sequential_agents,
                'created_at': datetime.now(timezone.utc)
            }
            
            logger.info(f"Created complex workflow: {name} with {len(parallel_agents)} parallel + {len(sequential_agents)} sequential agents")
            
            return workflow
            
        except Exception as e:
            logger.error(f"Failed to create complex workflow {name}: {e}")
            raise


class BaseAgentFramework:
    """
    Main framework class that orchestrates all components
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.is_initialized = False
        
        # Core components
        self.agent_registry = AgentRegistry()
        self.tool_registry = ToolRegistry()
        self.orchestrator = AgentOrchestrator(config.get('orchestration', {}))
        
        # Model management
        self.models: Dict[str, LiteLlm] = {}
        
        logger.info("Base Agent Framework initialized")
    
    async def initialize(self) -> None:
        """Initialize the framework"""
        try:
            # Initialize models
            await self._initialize_models()
            
            # Setup default tools
            await self._setup_default_tools()
            
            # Setup default agents
            await self._setup_default_agents()
            
            self.is_initialized = True
            logger.info("Base Agent Framework initialization completed")
            
        except Exception as e:
            logger.error(f"Failed to initialize framework: {e}")
            raise
    
    async def _initialize_models(self) -> None:
        """Initialize LiteLLM models"""
        try:
            models_config = self.config.get('models', {})
            
            for model_role, model_name in models_config.items():
                try:
                    lite_llm = LiteLlm(model=model_name)
                    self.models[model_role] = lite_llm
                    logger.info(f"Initialized model {model_role}: {model_name}")
                    
                except Exception as e:
                    logger.warning(f"Failed to initialize model {model_role}: {e}")
            
        except Exception as e:
            logger.error(f"Failed to initialize models: {e}")
            raise
    
    async def _setup_default_tools(self) -> None:
        """Setup default tools"""
        try:
            tools_config = self.config.get('tools', {})
            
            # Market data tool
            if tools_config.get('market_data_tool', {}).get('enabled', False):
                market_data_tool = await self._create_market_data_tool()
                self.tool_registry.register_tool(
                    'market_data_tool',
                    market_data_tool,
                    tools_config['market_data_tool']
                )
            
            # Signal publisher tool
            if tools_config.get('signal_publisher_tool', {}).get('enabled', False):
                signal_tool = await self._create_signal_publisher_tool()
                self.tool_registry.register_tool(
                    'signal_publisher_tool',
                    signal_tool,
                    tools_config['signal_publisher_tool']
                )
            
            logger.info(f"Setup {len(self.tool_registry.list_tools())} default tools")
            
        except Exception as e:
            logger.error(f"Failed to setup default tools: {e}")
            raise
    
    async def _create_market_data_tool(self) -> FunctionTool:
        """Create market data tool"""
        async def fetch_market_data(symbol: str) -> Dict[str, Any]:
            """Fetch market data for a symbol"""
            # Simulate market data fetch
            return {
                'symbol': symbol,
                'price': 100.0,
                'volume': 1000000,
                'timestamp': datetime.now(timezone.utc).isoformat()
            }
        
        return FunctionTool(func=fetch_market_data)
    
    async def _create_signal_publisher_tool(self) -> FunctionTool:
        """Create signal publisher tool"""
        async def publish_signal(signal: Dict[str, Any]) -> bool:
            """Publish a trading signal"""
            # Simulate signal publishing
            logger.info(f"Publishing signal: {signal}")
            return True
        
        return FunctionTool(func=publish_signal)
    
    async def _setup_default_agents(self) -> None:
        """Setup default agent configurations"""
        try:
            agents_config = self.config.get('agents', {})
            
            for agent_name, agent_config in agents_config.items():
                try:
                    agent = await self.create_agent(agent_name, agent_config)
                    self.agent_registry.register_agent(agent_name, agent, agent_config)
                    
                except Exception as e:
                    logger.warning(f"Failed to setup agent {agent_name}: {e}")
            
            logger.info(f"Setup {len(self.agent_registry.list_agents())} default agents")
            
        except Exception as e:
            logger.error(f"Failed to setup default agents: {e}")
            raise
    
    async def create_agent(self, name: str, config: Dict[str, Any]) -> LlmAgent:
        """Create an ADK LlmAgent with the given configuration"""
        try:
            model_name = config['model']
            
            # Get model instance
            model = None
            for role, model_instance in self.models.items():
                if model_instance.model == model_name:
                    model = model_instance
                    break
            
            if not model:
                # Create new model instance if not found
                model = LiteLlm(model=model_name)
            
            # Get relevant tools
            tools = self.tool_registry.list_tools()
            tool_instances = [self.tool_registry.get_tool(tool_name) for tool_name in tools]
            tool_instances = [tool for tool in tool_instances if tool is not None]
            
            # Create agent
            agent = LlmAgent(
                model=model,
                name=name,
                instruction=config.get('instruction', f"You are a trading agent named {name}"),
                description=config.get('description', f"Trading agent for {name}"),
                tools=tool_instances
            )
            
            logger.info(f"Created agent {name} with model {model_name}")
            return agent
            
        except Exception as e:
            logger.error(f"Failed to create agent {name}: {e}")
            raise
    
    async def get_available_tools(self) -> List[Dict[str, Any]]:
        """Get list of available tools"""
        tools = []
        for tool_name in self.tool_registry.list_tools():
            tool_config = self.tool_registry.tool_configs.get(tool_name, {})
            tools.append({
                'name': tool_name,
                'enabled': tool_config.get('enabled', False),
                'category': tool_config.get('category', 'general'),
                'description': tool_config.get('description', '')
            })
        return tools
    
    def get_framework_status(self) -> Dict[str, Any]:
        """Get framework status"""
        return {
            'is_initialized': self.is_initialized,
            'agents_count': len(self.agent_registry.list_agents()),
            'tools_count': len(self.tool_registry.list_tools()),
            'models_count': len(self.models),
            'active_workflows': len(self.orchestrator.active_workflows),
            'workflow_history_count': len(self.orchestrator.workflow_history)
        } 