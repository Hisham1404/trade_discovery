version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: discovery_postgres
    environment:
      POSTGRES_DB: discovery_cluster
      POSTGRES_USER: discovery_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Kolkata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - '5432:5432'
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 32G
        reservations:
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U discovery_user -d discovery_cluster"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: discovery_redis
    command: redis-server --appendonly yes --maxmemory 6gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - '6379:6379'
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pulsar:
    image: apachepulsar/pulsar:3.1.0
    container_name: discovery_pulsar
    command: bin/pulsar standalone
    environment:
      PULSAR_MEM: "-Xms2g -Xmx6g -XX:MaxDirectMemorySize=6g"
      PULSAR_GC: "-XX:+UseG1GC -XX:MaxGCPauseMillis=10"
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_conf:/pulsar/conf
      - ./config/pulsar:/pulsar/conf/custom:ro
    ports:
      - '6650:6650'  # Pulsar protocol
      - '8080:8080'  # HTTP admin
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/v2/persistent/public/default"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: discovery_qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant:/qdrant/config:ro
    ports:
      - '6333:6333'  # HTTP API
      - '6334:6334'  # gRPC API
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: discovery_elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=discovery-cluster
      - node.name=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: discovery_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: discovery_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: discovery_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - '3000:3000'
    networks:
      - discovery_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.52.0
    container_name: discovery_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - MEMORY_MAX_TRACES=50000
    ports:
      - '16686:16686'  # Jaeger UI
      - '14268:14268'  # Jaeger collector HTTP
      - '4317:4317'    # OTLP gRPC receiver
      - '4318:4318'    # OTLP HTTP receiver
    networks:
      - discovery_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: discovery_postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - discovery_network
    depends_on:
      - postgres
    restart: unless-stopped

  redis_exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: discovery_redis_exporter
    command: ["--redis.addr=redis:6379", "--web.listen-address=:9122"]
    networks:
      - discovery_network
    depends_on:
      - redis
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:v1.7.0
    container_name: discovery_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - discovery_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  pulsar_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/pulsar
  pulsar_conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/pulsar-conf
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

networks:
  discovery_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: discovery_br0 